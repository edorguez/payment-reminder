// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/edorguez/payment-reminder/internal/alert/models"
	mock "github.com/stretchr/testify/mock"
)

// MockAlertRepository is an autogenerated mock type for the AlertRepository type
type MockAlertRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, alert
func (_m *MockAlertRepository) Create(ctx context.Context, alert *models.Alert) (*models.Alert, error) {
	ret := _m.Called(ctx, alert)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Alert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Alert) (*models.Alert, error)); ok {
		return rf(ctx, alert)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Alert) *models.Alert); ok {
		r0 = rf(ctx, alert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Alert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Alert) error); ok {
		r1 = rf(ctx, alert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockAlertRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockAlertRepository) FindByID(ctx context.Context, id int64) (*models.Alert, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *models.Alert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Alert, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Alert); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Alert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, newAlert
func (_m *MockAlertRepository) Update(ctx context.Context, id int64, newAlert *models.Alert) error {
	ret := _m.Called(ctx, id, newAlert)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *models.Alert) error); ok {
		r0 = rf(ctx, id, newAlert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockAlertRepository creates a new instance of MockAlertRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAlertRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAlertRepository {
	mock := &MockAlertRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
